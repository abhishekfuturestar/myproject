# Get the predictions
enh_img, enh_img_imag, enhance_img, ori_out_1, ori_out_2, seg_out, mnt_o_out, mnt_w_out, mnt_h_out, mnt_s_out = main_net_model.predict(image)

# Process and debug enhance_img
enhance_img = np.squeeze(enhance_img)
enh_img = np.squeeze(enh_img)
enh_img_imag = np.squeeze(enh_img_imag)

# Print shapes and min/max values
print(f"Shape of enh_img: {enh_img.shape}, Min and Max values: {np.min(enh_img)}, {np.max(enh_img)}")
print(f"Shape of enh_img_imag: {enh_img_imag.shape}, Min and Max values: {np.min(enh_img_imag)}, {np.max(enh_img_imag)}")
print(f"Shape of enhance_img: {enhance_img.shape}, Min and Max values: {np.min(enhance_img)}, {np.max(enhance_img)}")

# Normalize the images to scale [0, 255]
def normalize_image(image):
    image = (image - np.min(image)) / (np.max(image) - np.min(image) + 1e-8)  # Scale to [0, 1]
    return (image * 255).astype(np.uint8)  # Convert to 8-bit integers

enh_img = normalize_image(enh_img)
enh_img_imag = normalize_image(enh_img_imag)
enhance_img = normalize_image(enhance_img)

# Plot and display the images
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
plt.imshow(enh_img, cmap='gray')
plt.title("Enh Image")
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(enh_img_imag, cmap='gray')
plt.title("Enh Image Imaginary")
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(enhance_img, cmap='gray')
plt.title("Enhance Image")
plt.axis('off')

plt.tight_layout()
plt.show()
