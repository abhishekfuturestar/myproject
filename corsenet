# Check the shape and values of enhance_img for debugging
print(f"Shape of enhance_img: {enhance_img.shape}")
print(f"Min and Max values of enhance_img: {np.min(enhance_img)}, {np.max(enhance_img)}")

# Normalize the enhance_img to proper image scale [0, 255]
min_val = np.min(enhance_img)
max_val = np.max(enhance_img)

if max_val - min_val > 0:  # Avoid division by zero
    enhance_img = (enhance_img - min_val) / (max_val - min_val)  # Normalize to [0, 1]
else:
    print("Warning: enhance_img has zero variance; setting to zeros.")
    enhance_img = np.zeros_like(enhance_img)  # Handle edge case where all values are the same

enhance_img = (enhance_img * 255).astype(np.uint8)  # Scale to [0, 255] and convert to 8-bit integers

# Save the enhanced image
enhance_img_output_path = f"{output_dir}/{set_name}/enhance_img_results/{img_name[i]}_enhance_img.jpg"
plt.imsave(enhance_img_output_path, np.squeeze(enhance_img), cmap='gray')
print(f"Enhanced image saved to {enhance_img_output_path}")
