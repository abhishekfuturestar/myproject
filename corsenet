import numpy as np
from tensorflow.keras.layers import Input, Lambda
from tensorflow.keras.models import Model
import tensorflow as tf

# Define a placeholder function for `orientation`
def orientation(x):
    # Example orientation logic: return the mean of the input tensor
    # Ensure the output has a shape compatible with the model's requirements
    return tf.reduce_mean(x, axis=[1, 2, 3], keepdims=True)

# Function to create a model for orientation
def get_tra_ori():
    # Input shape: (None, None, 1) allows dynamic spatial dimensions
    img_input = Input(shape=(None, None, 1))
    # Use Lambda layer for orientation computation
    theta = Lambda(orientation, output_shape=(1,))(img_input)
    # Create the model
    model = Model(inputs=img_input, outputs=theta)
    return model

# Instantiate the model
tra_ori_model = get_tra_ori()

# Print the model summary to verify the architecture
tra_ori_model.summary()
