def orientation(x, stride=8, window=17):
    """Compute orientation of the image using Sobel filters."""
    # Ensure the input is grayscale
    assert x.shape[-1] == 1, "Input images must be grayscale"

    # Define Sobel filters
    sobelx = tf.constant([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], dtype=tf.float32)
    sobely = tf.constant([[-1, -2, -1], [0, 0, 0], [1, 2, 1]], dtype=tf.float32)
    
    # Reshape Sobel filters for use in conv2d
    sobelx = tf.reshape(sobelx, [3, 3, 1, 1])
    sobely = tf.reshape(sobely, [3, 3, 1, 1])

    # Compute gradients using Sobel filters
    Ix = tf.nn.conv2d(x, sobelx, strides=[1, 1, 1, 1], padding='SAME')
    Iy = tf.nn.conv2d(x, sobely, strides=[1, 1, 1, 1], padding='SAME')

    # Compute gradient components for orientation calculation
    Gxx = tf.nn.conv2d(Ix**2, tf.ones((window, window, 1, 1)), strides=[1, stride, stride, 1], padding='SAME')
    Gyy = tf.nn.conv2d(Iy**2, tf.ones((window, window, 1, 1)), strides=[1, stride, stride, 1], padding='SAME')
    Gxy = tf.nn.conv2d(Ix * Iy, tf.ones((window, window, 1, 1)), strides=[1, stride, stride, 1], padding='SAME')
    
    # Calculate orientation angle using the gradients
    theta = 0.5 * tf.atan2(2 * Gxy, Gxx - Gyy)

    return theta
