
import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
from time import time
from scipy import ndimage
from datetime import datetime
from skimage.io import imread
from keras.optimizers import Adam

# Initialize log and paths
inference_set = ['../Dataset/prints_to_test_25/',]
CoarseNet_path = '../Models/CoarseNet.h5'
FineNet_path = '../Models/FineNet.h5'
output_dir = '../output_CoarseNet_25/'+datetime.now().strftime('%Y%m%d-%H%M%S')
logging = init_log(output_dir)
isHavingFineNet = False  # Set to True if using FineNet

# Ensure the necessary directories exist
def mkdir(path):
    if not os.path.exists(path):
        os.makedirs(path)

# Iterate over the input dataset
for i, deploy_set in enumerate(inference_set):
    set_name = deploy_set.split('/')[-2]
    img_name, folder_name, img_size = get_maximum_img_size_and_names(deploy_set)
    
    # Create output directories
    mkdir(output_dir + '/' + set_name + '/')
    mkdir(output_dir + '/' + set_name + '/mnt_results/')
    mkdir(output_dir + '/' + set_name + '/seg_results/')
    mkdir(output_dir + '/' + set_name + '/OF_results/')
    mkdir(output_dir + '/' + set_name + '/enhance_img_results/')  # Directory for enhanced images

    logging.info("Predicting \"%s\":" % (set_name))
    
    # Load CoarseNet model
    main_net_model = CoarseNetmodel((None, None, 1), CoarseNet_path, mode='deploy')

    # Load FineNet model if needed
    if isHavingFineNet:
        model_FineNet = FineNetmodel(num_classes=2, pretrained_path=FineNet_path, input_shape=(224,224,3))
        model_FineNet.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0), metrics=['accuracy'])
    
    for i in range(0, len(img_name)):
        logging.info("\"%s\" %d / %d: %s" % (set_name, i + 1, len(img_name), img_name[i]))

        image = imread(deploy_set + 'img_files/' + img_name[i] + '.bmp', mode='L')

        img_size = image.shape
        img_size = np.array(img_size, dtype=np.int32) // 8 * 8
        image = image[:img_size[0], :img_size[1]]
        
        original_image = image.copy()

        # Generate enhanced image (texture enhancement and model prediction)
        texture_img = FastEnhanceTexture(image, sigma=2.5, show=False)
        dir_map, fre_map = get_maps_STFT(texture_img, patch_size=64, block_size=16, preprocess=True)
        
        image = np.reshape(image, [1, image.shape[0], image.shape[1], 1])

        # Predict using CoarseNet model
        enh_img, enh_img_imag, enhance_img, ori_out_1, ori_out_2, seg_out, mnt_o_out, mnt_w_out, mnt_h_out, mnt_s_out = main_net_model.predict(image)

        # Debugging: Check the shape and values of enhance_img
        print(f"Shape of enhance_img: {enhance_img.shape}")
        print(f"Min and Max values of enhance_img: {np.min(enhance_img)}, {np.max(enhance_img)}")

        # Ensure enhance_img is in the range [0, 1] and scale to [0, 255]
        enhance_img = np.clip(enhance_img, 0, 1)  # Ensure values are within [0, 1]
        enhance_img = (enhance_img * 255).astype(np.uint8)  # Convert to 8-bit image range [0, 255]

        # Check if enhance_img looks valid
        if np.all(enhance_img == 0):
            print(f"Warning: enhance_img is completely blank for {img_name[i]}")
        else:
            print(f"Enhance image for {img_name[i]} is valid.")

        # Create the enhance_img directory if it doesn't exist
        enhance_img_dir = f"{output_dir}/{set_name}/enhance_img_results/"
        mkdir(enhance_img_dir)  # Create the directory if not exists

        # Save the enhanced image
        output_path = f"{enhance_img_dir}/{img_name[i]}_enhance_img.jpg"
        plt.imsave(output_path, enhance_img, cmap='gray')

        # Debugging: Check if image was saved correctly
        print(f"Enhanced image saved at {output_path}")

        # Use for output mask
        round_seg = np.round(np.squeeze(seg_out))
        seg_out = 1 - round_seg
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (10, 10))
        seg_out = cv2.morphologyEx(seg_out, cv2.MORPH_CLOSE, kernel)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))
        seg_out = cv2.morphologyEx(seg_out, cv2.MORPH_OPEN, kernel)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
        seg_out = cv2.dilate(seg_out, kernel)

        # Adaptive threshold
        final_minutiae_score_threashold = 0.45
        early_minutiae_thres = final_minutiae_score_threashold + 0.05

        while final_minutiae_score_threashold >= 0:
            mnt = label2mnt(np.squeeze(mnt_s_out) * np.round(np.squeeze(seg_out)), mnt_w_out, mnt_h_out, mnt_o_out, thresh=early_minutiae_thres)
            mnt_nms_1 = py_cpu_nms(mnt, 0.5)
            mnt_nms_2 = nms(mnt)
            if mnt_nms_1.shape[0] > 4 and mnt_nms_2.shape[0] > 4:
                break
            else:
                final_minutiae_score_threashold = final_minutiae_score_threashold - 0.05
                early_minutiae_thres = early_minutiae_thres - 0.05

        mnt_nms = fuse_nms(mnt_nms_1, mnt_nms_2)
        mnt_nms = mnt_nms[mnt_nms[:, 3] > early_minutiae_thres, :]
        mnt_refined = []

        if isHavingFineNet:
            # Verify using FineNet
            patch_minu_radio = 22
            for idx_minu in range(mnt_nms.shape[0]):
                try:
                    x_begin = int(mnt_nms[idx_minu, 1]) - patch_minu_radio
                    y_begin = int(mnt_nms[idx_minu, 0]) - patch_minu_radio
                    patch_minu = original_image[x_begin:x_begin + 2 * patch_minu_radio, y_begin:y_begin + 2 * patch_minu_radio]
                    patch_minu = cv2.resize(patch_minu, dsize=(224, 224), interpolation=cv2.INTER_NEAREST)
                    ret = np.empty((patch_minu.shape[0], patch_minu.shape[1], 3), dtype=np.uint8)
                    ret[:, :, 0] = patch_minu
                    ret[:, :, 1] = patch_minu
                    ret[:, :, 2] = patch_minu
                    patch_minu = np.expand_dims(patch_minu, axis=0)

                    [isMinutiaeProb] = model_FineNet.predict(patch_minu)
                    isMinutiaeProb = isMinutiaeProb[0]
                    tmp_mnt = mnt_nms[idx_minu, :].copy()
                    tmp_mnt[3] = (4*tmp_mnt[3] + isMinutiaeProb) / 5
                    mnt_refined.append(tmp_mnt)

                except:
                    mnt_refined.append(mnt_nms[idx_minu, :])
        else:
            mnt_refined = mnt_nms

        mnt_nms_backup = mnt_nms.copy()
        mnt_nms = np.array(mnt_refined)

        if mnt_nms.shape[0] > 0:
            mnt_nms = mnt_nms[mnt_nms[:, 3] > final_minutiae_score_threashold, :]
        
        final_mask = ndimage.zoom(np.round(np.squeeze(seg_out)), [8, 8], order=0)
        # Save the orientation field
        show_orientation_field(original_image, dir_map + np.pi, mask=final_mask, fname="%s/%s/OF_results/%s_OF.jpg" % (output_dir, set_name, img_name[i]))
        
        fuse_minu_orientation(dir_map, mnt_nms, mode=3)

        # Save minutiae results
        mnt_writer(mnt_nms, img_name[i], img_size, "%s/%s/mnt_results/%s.mnt"%(output_dir, set_name, img_name[i]))
        draw_minutiae(original_image, mnt_nms, "%s/%s/%s_minu.jpg"%(output_dir
