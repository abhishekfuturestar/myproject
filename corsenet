# Define output shape functions
def compute_output_shape_reduce_sum(input_shape):
    # Assuming reduce_sum reduces the last dimension (channel-wise summation)
    return input_shape[:-1]

def compute_output_shape_merge_concat(input_shapes):
    # Assuming merge_concat concatenates along the channel axis
    shape1, shape2 = input_shapes
    return shape1[:-1] + (shape1[-1] + shape2[-1],)

# Updated code with output_shape parameter for Lambda layers
upsample_ori = UpSampling2D(size=(8, 8))(ori_peak)
seg_round = Activation('softsign')(seg_out)

upsample_seg = UpSampling2D(size=(8, 8))(seg_round)

mul_mask_real = Lambda(merge_mul)([filter_img_real, upsample_ori])
enh_img_real = Lambda(reduce_sum, output_shape=compute_output_shape_reduce_sum, name='enh_img_real_2')(mul_mask_real)

mul_mask_imag = Lambda(merge_mul)([filter_img_imag, upsample_ori])
enh_img_imag = Lambda(reduce_sum, output_shape=compute_output_shape_reduce_sum, name='enh_img_imag_2')(mul_mask_imag)

enh_img = Lambda(atan2, name='phase_img')([enh_img_imag, enh_img_real])

enh_seg_img = Lambda(
    merge_concat, output_shape=compute_output_shape_merge_concat, name='phase_seg_img'
)([enh_img, upsample_seg])
