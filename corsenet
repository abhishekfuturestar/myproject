# Ensure the ori_peak and other dependencies are defined correctly before this section
upsample_ori = UpSampling2D(size=(8, 8))(ori_peak)
seg_round = Activation('softsign')(seg_out)

upsample_seg = UpSampling2D(size=(8, 8))(seg_round)

# Define `mul_mask_real`
mul_mask_real = Lambda(merge_mul)([filter_img_real, upsample_ori])

# Define output shape function for reduce_sum
def compute_output_shape_reduce_sum(input_shape):
    return input_shape[:-1]

# Add Lambda layers with explicit output shapes
enh_img_real = Lambda(
    reduce_sum, 
    output_shape=compute_output_shape_reduce_sum, 
    name='enh_img_real_2'
)(mul_mask_real)

# Define `mul_mask_imag`
mul_mask_imag = Lambda(merge_mul)([filter_img_imag, upsample_ori])

# Define `enh_img_imag` similarly
enh_img_imag = Lambda(
    reduce_sum, 
    output_shape=compute_output_shape_reduce_sum, 
    name='enh_img_imag_2'
)(mul_mask_imag)

# Define `enh_img` and `enh_seg_img`
enh_img = Lambda(atan2, name='phase_img')([enh_img_imag, enh_img_real])
enh_seg_img = Lambda(merge_concat, name='phase_seg_img')([enh_img, upsample_seg])
