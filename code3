import fingerprint_enhancer
import cv2
import os
import numpy as np
from skimage.metrics import structural_similarity as ssim

# Define input and output folders
input_folder = r'C:/Users/2179048/Desktop/fingerprint/input7'
output_folder = r'C:/Users/2179048/Desktop/fingerprint/input7/output'

# Create output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Initialize a list to store SSIM scores
ssim_scores = []

# Loop through all files in the input folder
for file_name in os.listdir(input_folder):
    input_path = os.path.join(input_folder, file_name)

    # Check if the file is an image
    if os.path.isfile(input_path):
        # Read the image in grayscale
        img = cv2.imread(input_path, 0)

        if img is None:
            print(f"Error: Unable to load the image {file_name}. Skipping.")
            continue

        # Enhance the fingerprint
        enhanced = fingerprint_enhancer.enhance_fingerprint(img)

        # Ensure both images are in the range [0, 255] for SSIM calculation
        img_uint8 = np.uint8(img)  # No scaling needed as it should be in [0, 255]
        enhanced_uint8 = np.uint8(np.clip(enhanced * 255, 0, 255))  # Ensure scaling to [0, 255]

        # Calculate SSIM between the original and enhanced images (using data_range=255 for uint8 images)
        score, _ = ssim(img_uint8, enhanced_uint8, full=True, data_range=255)

        # Save the SSIM score
        ssim_scores.append((file_name, score))

        # Add SSIM score as text on the combined image (only once)
        font = cv2.FONT_HERSHEY_SIMPLEX
        score_text = f"SSIM: {score:.4f}"

        # Choose a color for the SSIM score text (Red color)
        color = (0, 0, 255)  # Red in BGR format

        # Convert grayscale images to BGR before adding colored text
        img_bgr = cv2.cvtColor(img_uint8, cv2.COLOR_GRAY2BGR)
        enhanced_bgr = cv2.cvtColor(enhanced_uint8, cv2.COLOR_GRAY2BGR)

        # Concatenate original and enhanced images side by side
        combined_image = np.hstack((img_bgr, enhanced_bgr))

        # Add SSIM score text on the combined image (either at the top or bottom)
        combined_image_with_text = combined_image.copy()
        cv2.putText(combined_image_with_text, score_text, (10, 30), font, 0.8, color, 2, cv2.LINE_AA)

        # Save the combined image to the output folder
        output_path = os.path.join(output_folder, f"combined_{file_name}")
        cv2.imwrite(output_path, combined_image_with_text)

        print(f"Saved combined image: {output_path} with SSIM: {score:.4f}")

# Print SSIM scores for all images
print("\nSSIM Scores for all images:")
for file_name, score in ssim_scores:
    print(f"{file_name}: SSIM = {score:.4f}")

print("Processing complete. All combined images saved.")
