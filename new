from skimage import exposure
from datetime import datetime
from skimage.io import imread
import numpy as np
import cv2
from scipy import ndimage
import matplotlib.pyplot as plt
import os

# Helper functions (ensure these are defined elsewhere or import them)
# CoarseNetmodel, FineNetmodel, FastEnhanceTexture, get_maps_STFT,
# label2mnt, py_cpu_nms, nms, fuse_nms, show_orientation_field,
# fuse_minu_orientation, mnt_writer, draw_minutiae

def mkdir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def normalize_image(image):
    image = (image - np.min(image)) / (np.max(image) - np.min(image) + 1e-8)  # Scale to [0, 1]
    return (image * 255).astype(np.uint8)  # Convert to 8-bit integers

# Paths and configurations
inference_set = ['../Dataset/prints_to_test_25/']
CoarseNet_path = '../Models/CoarseNet.h5'
FineNet_path = '../Models/FineNet.h5'
output_dir = '../output_CoarseNet_25/' + datetime.now().strftime('%Y%m%d-%H%M%S')
isHavingFineNet = False

# Create output directories
mkdir(output_dir)

for deploy_set in inference_set:
    set_name = deploy_set.split('/')[-2]
    mkdir(f"{output_dir}/{set_name}/enhance_img_results/")

    # Initialize CoarseNet
    main_net_model = CoarseNetmodel((None, None, 1), CoarseNet_path, mode='deploy')

    for img_name in os.listdir(deploy_set + 'img_files/'):
        if not img_name.endswith('.bmp'):
            continue

        logging.info(f"Processing {img_name}")

        # Load and preprocess image
        image = imread(deploy_set + 'img_files/' + img_name, as_gray=True)
        img_size = np.array(image.shape, dtype=np.int32) // 8 * 8
        image = image[:img_size[0], :img_size[1]]
        original_image = image.copy()

        # Enhance image
        texture_img = FastEnhanceTexture(image, sigma=2.5, show=False)
        dir_map, fre_map = get_maps_STFT(texture_img, patch_size=64, block_size=16, preprocess=True)

        # Expand dimensions for model prediction
        image = np.reshape(image, [1, image.shape[0], image.shape[1], 1])
        enh_img, enh_img_imag, enhance_img, *_ = main_net_model.predict(image)

        # Resolution inspection
        print(f"Shape of enh_img: {enh_img.shape}")

        if len(enh_img.shape) == 2:  # If `enh_img` is (height, width)
            output_height, output_width = enh_img.shape
        elif len(enh_img.shape) == 3:  # If `enh_img` is (height, width, channels)
            output_height, output_width, _ = enh_img.shape
        elif len(enh_img.shape) == 4:  # If `enh_img` is (batch_size, height, width, channels)
            _, output_height, output_width, _ = enh_img.shape
        else:
            raise ValueError(f"Unexpected shape for enh_img: {enh_img.shape}")

        input_height, input_width = original_image.shape
        print(f"Input Resolution: {input_height}x{input_width}")
        print(f"Output Resolution: {output_height}x{output_width}")

        # Normalize and save images
        enh_img_normalized = normalize_image(np.squeeze(enh_img))
        enh_img_imag_normalized = normalize_image(np.squeeze(enh_img_imag))
        enhance_img_normalized = normalize_image(np.squeeze(enhance_img))

        plt.imsave(f"{output_dir}/{set_name}/enhance_img_results/{img_name}_enh_img.jpg", enh_img_normalized, cmap='gray')
        plt.imsave(f"{output_dir}/{set_name}/enhance_img_results/{img_name}_enh_img_imag.jpg", enh_img_imag_normalized, cmap='gray')
        plt.imsave(f"{output_dir}/{set_name}/enhance_img_results/{img_name}_enhance_img.jpg", enhance_img_normalized, cmap='gray')

        plt.figure(figsize=(12, 4))
        plt.subplot(1, 3, 1)
        plt.imshow(enh_img_normalized, cmap='gray')
        plt.title("Enh Image")
        plt.axis('off')

        plt.subplot(1, 3, 2)
        plt.imshow(enh_img_imag_normalized, cmap='gray')
        plt.title("Enh Image Imaginary")
        plt.axis('off')

        plt.subplot(1, 3, 3)
        plt.imshow(enhance_img_normalized, cmap='gray')
        plt.title("Enhance Image")
        plt.axis('off')
        plt.tight_layout()
        plt.show()
