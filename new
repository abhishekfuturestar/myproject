from skimage import exposure

inference_set = ['../Dataset/prints_to_test_25/',]

CoarseNet_path = '../Models/CoarseNet.h5'

output_dir = '../output_CoarseNet_25/' + datetime.now().strftime('%Y%m%d-%H%M%S')

FineNet_path = '../Models/FineNet.h5'

logging = init_log(output_dir)

# If use FineNet to refine, set into True
isHavingFineNet = False

for i, deploy_set in enumerate(inference_set):
    set_name = deploy_set.split('/')[-2]

    # Read image and GT
    img_name, folder_name, img_size = get_maximum_img_size_and_names(deploy_set)

    mkdir(output_dir + '/' + set_name + '/')
    mkdir(output_dir + '/' + set_name + '/mnt_results/')
    mkdir(output_dir + '/' + set_name + '/seg_results/')
    mkdir(output_dir + '/' + set_name + '/OF_results/')
    mkdir(output_dir + '/' + set_name + '/enhance_img_results/')

    logging.info(f"Predicting \"{set_name}\":")

    main_net_model = CoarseNetmodel((None, None, 1), CoarseNet_path, mode='deploy')

    # ====== Load FineNet to verify
    if isHavingFineNet:
        model_FineNet = FineNetmodel(num_classes=2,
                                     pretrained_path=FineNet_path,
                                     input_shape=(224, 224, 3))
        model_FineNet.compile(loss='categorical_crossentropy',
                              optimizer=Adam(lr=0),
                              metrics=['accuracy'])

    for i in range(len(img_name)):

        logging.info(f"\"{set_name}\" {i + 1} / {len(img_name)}: {img_name[i]}")

        image = imread(deploy_set + 'img_files/' + img_name[i] + '.bmp', mode='L')  # / 255.0

        img_size = image.shape
        img_size = np.array(img_size, dtype=np.int32) // 8 * 8
        image = image[:img_size[0], :img_size[1]]

        original_image = image.copy()

        # Generate OF
        texture_img = FastEnhanceTexture(image, sigma=2.5, show=False)
        dir_map, fre_map = get_maps_STFT(texture_img, patch_size=64, block_size=16, preprocess=True)

        image = np.reshape(image, [1, image.shape[0], image.shape[1], 1])

        enh_img, enh_img_imag, enhance_img, ori_out_1, ori_out_2, seg_out, mnt_o_out, mnt_w_out, mnt_h_out, mnt_s_out = \
            main_net_model.predict(image)

        # Inspect resolution
        input_height, input_width = image.shape[1:3]
        output_height, output_width = enh_img.shape
        print(f"Input Resolution: {input_height}x{input_width}")
        print(f"Output Resolution: {output_height}x{output_width}")

        # Normalize and save images
        def normalize_image(image):
            image = (image - np.min(image)) / (np.max(image) - np.min(image) + 1e-8)  # Scale to [0, 1]
            return (image * 255).astype(np.uint8)  # Convert to 8-bit integers

        enh_img_normalized = normalize_image(enh_img)
        enh_img_imag_normalized = normalize_image(enh_img_imag)
        enhance_img_normalized = normalize_image(enhance_img)

        # Upsample if needed
        if (input_height != output_height) or (input_width != output_width):
            enh_img_normalized = cv2.resize(enh_img_normalized, (input_width, input_height), interpolation=cv2.INTER_CUBIC)
            enh_img_imag_normalized = cv2.resize(enh_img_imag_normalized, (input_width, input_height), interpolation=cv2.INTER_CUBIC)
            enhance_img_normalized = cv2.resize(enhance_img_normalized, (input_width, input_height), interpolation=cv2.INTER_CUBIC)

        # Save outputs
        plt.imsave(f"{output_dir}/{set_name}/enhance_img_results/{img_name[i]}_enh_img.jpg", enh_img_normalized, cmap='gray')
        plt.imsave(f"{output_dir}/{set_name}/enhance_img_results/{img_name[i]}_enh_img_imag.jpg", enh_img_imag_normalized, cmap='gray')
        plt.imsave(f"{output_dir}/{set_name}/enhance_img_results/{img_name[i]}_enhance_img.jpg", enhance_img_normalized, cmap='gray')

        plt.figure(figsize=(12, 4))
        plt.subplot(1, 3, 1)
        plt.imshow(enh_img_normalized, cmap='gray')
        plt.title("Enh Image")
        plt.axis('off')

        plt.subplot(1, 3, 2)
        plt.imshow(enh_img_imag_normalized, cmap='gray')
        plt.title("Enh Image Imaginary")
        plt.axis('off')
        plt.subplot(1, 3, 3)
        plt.imshow(enhance_img_normalized, cmap='gray')
        plt.title("Enhance Image")
        plt.axis('off')
        plt.tight_layout()
        plt.show()

        # Remaining processing (segmentation, minutiae detection, etc.)
        # ...
