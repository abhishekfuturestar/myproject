# import cv2
# import matplotlib.pyplot as plt
# from scipy import ndimage
# from time import time
# from datetime import datetime
# from skimage.io import imread
# from keras.models import load_model

inference_set = ['../Dataset/prints_to_test_25/']

CoarseNet_path = '../Models/CoarseNet.h5'

output_dir = '../output_CoarseNet_25/' + datetime.now().strftime('%Y%m%d-%H%M%S')

FineNet_path = '../Models/FineNet.h5'

logging = init_log(output_dir)

# If use FineNet to refine, set into True
isHavingFineNet = False

for i, deploy_set in enumerate(inference_set):
    set_name = deploy_set.split('/')[-2]

    # Read image and GT
    img_name, folder_name, img_size = get_maximum_img_size_and_names(deploy_set)

    mkdir(output_dir + '/' + set_name + '/')
    mkdir(output_dir + '/' + set_name + '/mnt_results/')
    mkdir(output_dir + '/' + set_name + '/seg_results/')
    mkdir(output_dir + '/' + set_name + '/OF_results/')
    mkdir(output_dir + '/' + set_name + '/enhance_img_results/')

    logging.info("Predicting \"%s\":" % (set_name))

    main_net_model = CoarseNetmodel((None, None, 1), CoarseNet_path, mode='deploy')

    # ====== Load FineNet to verify
    if isHavingFineNet:
        model_FineNet = FineNetmodel(num_classes=2,
                                     pretrained_path=FineNet_path,
                                     input_shape=(224, 224, 3))

        model_FineNet.compile(loss='categorical_crossentropy',
                              optimizer=Adam(lr=0),
                              metrics=['accuracy'])

    for i in range(0, len(img_name)):
        logging.info("\"%s\" %d / %d: %s" % (set_name, i + 1, len(img_name), img_name[i]))

        image = imread(deploy_set + 'img_files/' + img_name[i] + '.bmp', as_gray=True)

        img_size = image.shape
        img_size = np.array(img_size, dtype=np.int32) // 8 * 8
        image = image[:img_size[0], :img_size[1]]

        original_image = image.copy()

        # Generate OF
        texture_img = FastEnhanceTexture(image, sigma=2.5, show=False)
        dir_map, fre_map = get_maps_STFT(texture_img, patch_size=64, block_size=16, preprocess=True)
        
        image = np.reshape(image, [1, image.shape[0], image.shape[1], 1])

        enh_img, enh_img_imag, enhance_img, ori_out_1, ori_out_2, seg_out, mnt_o_out, mnt_w_out, mnt_h_out, mnt_s_out = \
            main_net_model.predict(image)

        # Check the shape and values of enhance_img for debugging
        print(f"Shape of enhance_img: {enhance_img.shape}")
        print(f"Min and Max values of enhance_img: {np.min(enhance_img)}, {np.max(enhance_img)}")

        # Normalize the enhance_img to proper image scale [0, 255]
        enhance_img = np.squeeze(enhance_img)  # Remove unnecessary dimensions
        enhance_img = np.clip(enhance_img, 0, 1)  # Ensure values are in range [0, 1]
        enhance_img = (enhance_img * 255).astype(np.uint8)  # Convert to 8-bit integers

        # Optionally, visualize the image for debugging
        # plt.imshow(enhance_img, cmap='gray')
        # plt.show()

        # Save the enhanced image
        enhance_img_path = f"{output_dir}/{set_name}/enhance_img_results/{img_name[i]}_enhance_img.jpg"
        plt.imsave(enhance_img_path, enhance_img, cmap='gray')

        # Debug to confirm saving
        print(f"Enhanced image saved to: {enhance_img_path}")

        # Continue with other processing...
        # (Rest of your code remains unchanged)
