‚úÖ What the README Explains
1. Purpose of the App
It helps create, visualize, and test layout templates for bubble sheets (like OMR sheets) using Python and OpenCV.

Allows defining question blocks, cropping areas, and adjusting visual overlays for accurate scanning and evaluation.

2. Main Files
template.json: Defines how the bubble sheet is laid out (e.g., questions, bubble sizes, gaps, positions).

evaluation.json: Contains answer keys and scoring logic for evaluating filled OMR sheets.

config.json: Advanced tuning of thresholds, logging, image output behavior, etc.

üõ†Ô∏è Step-by-Step: How to Run the App
üîπ 1. Install Requirements
Make sure Python and required libraries are installed (assumed but not listed; usually includes opencv-python, numpy, etc.).

bash
Copy
Edit
pip install -r requirements.txt  # If requirements.txt exists
üîπ 2. Create Input Directory and Image
Create an input directory for your template:

bash
Copy
Edit
mkdir -p inputs/AdrianSamples
Download the sample image from:
Adrian‚Äôs OMR example
Save the image to:

swift
Copy
Edit
inputs/AdrianSamples/
üîπ 3. Create the Template File
Save this in:

pgsql
Copy
Edit
inputs/template.json
Starter JSON:

json
Copy
Edit
{
  "pageDimensions": [300, 400],
  "bubbleDimensions": [20, 20],
  "customLabels": {},
  "fieldBlocks": {
    "MCQBlock1": {
      "fieldType": "QTYPE_MCQ5",
      "origin": [0, 0],
      "fieldLabels": ["q1", "q2", "q3", "q4", "q5"],
      "bubblesGap": 30,
      "labelsGap": 30
    }
  },
  "preProcessors": [
    {
      "name": "CropPage",
      "options": {
        "morphKernel": [10, 10]
      }
    }
  ]
}
üîπ 4. Visualize Template Layout
Run this command to overlay the template on the input sheet:

bash
Copy
Edit
python3 main.py --setLayout
This displays a cropped image with a basic overlay (origin starts at top-left: [0,0]).

üîπ 5. Tweak Layout (if needed)
Adjust origin:
Change "origin": [0, 0] to something like [65, 60] in template.json if overlay is misaligned.

Adjust spacing:
Modify gaps and bubble size for better alignment:

json
Copy
Edit
"bubblesGap": 41,
"labelsGap": 52,
"bubbleDimensions": [25, 25]
Run the same command again to preview changes:

bash
Copy
Edit
python3 main.py --setLayout
üß™ Evaluate Answer Sheets
Once your layout is defined:

Create an evaluation.json file in the same folder as your template.json.

Define:

questions_in_order

answers_in_order

marking_schemes (e.g., negative marking, partial scores)

Example:

json
Copy
Edit
{
  "source_type": "local",
  "options": {
    "questions_in_order": ["q1..10"],
    "answers_in_order": ["A", "B", "AB", ["A", "B"], [["A", 2], ["B", 1]]],
    "marking_schemes": {
      "DEFAULT": {
        "correct": "3",
        "incorrect": "0",
        "unmarked": "0"
      }
    }
  }
}
üîπ To Evaluate a Filled Sheet
Put filled answer sheet image in a sample folder (e.g. samples/sample1) and run:

bash
Copy
Edit
python3 main.py -i samples/sample1
Or to run and evaluate using advanced configs:

bash
Copy
Edit
python3 main.py -i samples/3-answer-key/bonus-marking-grouping
üìÇ File Overview Summary
File	Purpose
template.json	Defines OMR sheet layout (bubbles, blocks, gaps, etc.)
evaluation.json	Defines answer keys, marking logic
config.json	Advanced settings for thresholds, output visuals
main.py	The main script for template preview, layout setup, and evaluation

üìå Tips
Use markers (omr_marker.jpg) and the CropOnMarkers processor for mobile photo alignment.

Use customLabels to combine multiple bubbles into a single logical field (e.g., roll numbers).

Enable outputs like scores, verdicts, and answer summaries in the evaluation settings.

Let me know if you want help creating a custom template.json or evaluation.json for your use case.








